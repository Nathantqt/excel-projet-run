Option Explicit

Sub Main()


Dim wsControl As Worksheet
Dim wsEmail As Worksheet
Dim wsVolCab As Worksheet
Set wsControl = ThisWorkbook.Sheets("Control") 'control sheet
Set wsEmail = ThisWorkbook.Sheets("Email") ' build the final sheet here
Set wsVolCab = ThisWorkbook.Sheets("vol_cab") ' data sheet
Dim year1 As Long 'date1 indicate in the control input
Dim year2 As Long 'date2 indicate in the control input
Dim type1 As String 'name1 of classes
Dim type2 As String 'name2 of classes
Dim type3 As String 'name3 of classes
Dim type4 As String 'name4 of classes
Dim type1_number As Long 'number of row we want for the class1
Dim type4_number As Long 'number of row we want for the class2
Dim type2_number As Long 'number of row we want for the class3
Dim type3_number As Long 'number of row we want for the class4
Dim outputRow As Variant ' the first (next) line clear
Dim lastRow As Long '  the last row number of the datasheet
Dim devise1 As String 'currency we want
Dim DebLigne As Long 'the first row number of the datasheet
Dim firstIndex As Long 'the first (next) line clear
Dim y As Long 'loop on y
Dim Add As Long 'long used to increase the number of cell to access to the right input on the control sheet



outputRow = 20
firstIndex = 20
lastRow = 302
DebLigne = 2
Add = 0
Call Macro1(firstIndex) ' unmerge and set up the right format
wsEmail.Range("A" & firstIndex & ":AZ" & wsEmail.Rows.count).ClearContents ' clear content of the email sheet
wsEmail.Range("C" & firstIndex & ":AZ" & wsEmail.Rows.count).ClearFormats  'clear format of the email sheet



For y = 1 To 3: ' access to the right input data
type1 = wsControl.Range("A" & 4 + Add)
type2 = wsControl.Range("A" & 5 + Add)
type3 = wsControl.Range("A" & 6 + Add)
type4 = wsControl.Range("A" & 7 + Add)

type1_number = wsControl.Range("B" & 4 + Add)
type2_number = wsControl.Range("B" & 5 + Add)
type3_number = wsControl.Range("B" & 6 + Add)
type4_number = wsControl.Range("B" & 7 + Add)
year1 = wsControl.Range("B" & 2 + Add)
year2 = wsControl.Range("B" & 3 + Add)

devise1 = wsControl.Range("A" & 1 + Add)
Add = Add + 8

outputRow = Control_Button1_Click(firstIndex, outputRow, devise1, lastRow, DebLigne, type1, type2, type3, type4, year1, year2, type1_number, type2_number, type3_number, type4_number)
firstIndex = outputRow

Next y




End Sub

Function Control_Button1_Click(firstIndex As Long, outputRow As Variant, devise1 As String, lastRow As Long, DebLigne As Long, type1 As String, type2 As String, type3 As String, type4 As String, year1 As Long, year2 As Long, type1_number As Long, type2_number As Long, type3_number As Long, type4_number As Long) As Variant

'function used to call the right function for each type of bond

Dim wsControl As Worksheet
Dim wsEmail As Worksheet
Dim wsVolCab As Worksheet
Set wsControl = ThisWorkbook.Sheets("Control")
Set wsEmail = ThisWorkbook.Sheets("Email")
Set wsVolCab = ThisWorkbook.Sheets("vol_cab")


Dim CCYColumnIndex As Long
Dim VolColumnIndex As Long
Dim YearColumnIndex As Long
Dim IssuerColumnIndex As Long



Dim CCYColumn As Range
Dim IssuerColumn As Range
Dim YearColumn As Range
Dim VolColumn As Range


Set YearColumn = wsVolCab.Range("YearColumn")
YearColumnIndex = YearColumn.Column ' get the yearColumnIndex from the data

Set CCYColumn = wsVolCab.Range("CCYColumn")
CCYColumnIndex = CCYColumn.Column ' get the currencyColumnIndex from the data

Set VolColumn = wsVolCab.Range("VolColumn")
VolColumnIndex = VolColumn.Column ' get the volatilityColumn Index from the data

Set IssuerColumn = wsVolCab.Range("IssuerColumn")
IssuerColumnIndex = IssuerColumn.Column ' get the IssuerColumn Index from the data


' call the selectValues function for each type of bond we want for this date
outputRow = SelectValues(lastRow, DebLigne, YearColumnIndex, CCYColumnIndex, VolColumnIndex, IssuerColumnIndex, type1_number, devise1, year1, year2, outputRow, type1)
outputRow = SelectValues(lastRow, DebLigne, YearColumnIndex, CCYColumnIndex, VolColumnIndex, IssuerColumnIndex, type2_number, devise1, year1, year2, outputRow, type2)
outputRow = SelectValues(lastRow, DebLigne, YearColumnIndex, CCYColumnIndex, VolColumnIndex, IssuerColumnIndex, type3_number, devise1, year1, year2, outputRow, type3)
outputRow = SelectValues(lastRow, DebLigne, YearColumnIndex, CCYColumnIndex, VolColumnIndex, IssuerColumnIndex, type4_number, devise1, year1, year2, outputRow, type4)


 ' merge the column A and put the common date
With wsEmail.Range(wsEmail.Cells(firstIndex, 1), wsEmail.Cells(outputRow - 1, 1))
        .Merge
        If year1 = year2 Then
        .Value = year1
        Else
        .Value = year1 & "-" & year2
        End If
        
End With
wsEmail.Rows(outputRow).Interior.Color = RGB(21, 96, 130) ' add a line at the end in blue to separate each date

Control_Button1_Click = outputRow + 1
End Function



Function SelectValues(lastRow As Long, DebLigne As Long, YearColumnIndex As Long, CCYColumnIndex As Long, VolColumnIndex As Long, IssuerColumnIndex As Long, type1_number As Long, devise1 As String, year1 As Long, year2 As Long, outputRow As Variant, type1 As String) As Long
'find the right number of data in the inputsheet and display uniquely the rows with the highest vol that respect all the criterias
Dim count As Long
Dim tempValue As Variant
Dim tempIndex As Long
Dim i As Long
Dim j As Long
Dim wsControl As Worksheet
Dim wsEmail As Worksheet
Dim wsVolCab As Worksheet
Set wsControl = ThisWorkbook.Sheets("Control")
Set wsEmail = ThisWorkbook.Sheets("Email")
Set wsVolCab = ThisWorkbook.Sheets("vol_cab")
Dim YearCell As Long
Dim CCYCell As String
Dim IssuerCell As String


ReDim values(1 To lastRow) As Variant
ReDim indices(1 To lastRow) As Long





count = 0
For i = DebLigne To lastRow
CCYCell = wsVolCab.Cells(i, CCYColumnIndex).Value
YearCell = wsVolCab.Cells(i, YearColumnIndex).Value
IssuerCell = wsVolCab.Cells(i, IssuerColumnIndex).Value
    If CCYCell = devise1 And YearCell >= year1 And YearCell <= year2 And IssuerCell = type1 Then
        count = count + 1
        values(count) = wsVolCab.Cells(i, VolColumnIndex).Value
        indices(count) = i

    End If
Next i

' bubble arrangement
    
    For i = 1 To count - 1
        For j = i + 1 To count
            If values(i) < values(j) Then
                'exchange the value
                tempValue = values(i)
                values(i) = values(j)
                values(j) = tempValue

                ' exchange the index
                tempIndex = indices(i)
                indices(i) = indices(j)
                indices(j) = tempIndex
            End If
        Next j
    Next i
    
    ' resize to keep only the n biggest values
    If type1_number < count Then
        ReDim Preserve values(1 To type1_number)
        ReDim Preserve indices(1 To type1_number)
    End If




Dim outputRowStart As Long
outputRowStart = outputRow


For i = 1 To Application.WorksheetFunction.Min(type1_number, count)
    ' copy the rows in the email sheet
    wsVolCab.Rows(indices(i)).Columns("A:E").Copy Destination:=wsEmail.Cells(outputRow, 3) ' Columns("A:B") corresponds to columns F and G
    outputRow = outputRow + 1 'pass to the next line
Next i

    With wsEmail.Range(wsEmail.Cells(outputRowStart, 2), wsEmail.Cells(outputRow - 1, 2))
        .Merge
        .Value = type1
        
    End With

SelectValues = outputRow
    
End Function







Sub Macro1(firstIndex As Long)
    
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Email")
    

    ws.Cells.UnMerge
    With ws.Columns("A:A")
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        With .Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
    End With
    
    
    ws.Cells.UnMerge
    With ws.Columns("B:B")
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        With .Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
    End With
End Sub
